2025-10-04
- Brain snapshot writer now reads `snapshot.compress_level` from `config.yaml`
  (default `2`) and requires the multi-threaded `pigz` compressor. If `pigz`
  is missing the runtime auto-clones the upstream repo, builds and installs it
  under `~/.local/bin`, and deletes the clone; failures now raise an error
  instead of silently falling back. Snapshot metadata records both compression
  level and the enforced compressor, delivering faster saves without altering
  payloads.

2025-10-01
- Added ``snapshot_to_image`` helper to render network topology PNGs from
  ``.marble`` snapshot files.

2025-09-11
- Benchmarked zlib compression levels 1-9 and selected level 2 as the best
  speed/size compromise for `UniversalTensorCodec`, improving encode times
  without altering determinism.

2025-09-26
- Decision controller now rebuilds its cost vector each step from real ``h_t``
  costs so budget penalties and policy sampling use up-to-date spending.

2025-09-30
- Replaced LZW-style compression in `UniversalTensorCodec` with `zlib` to speed up encoding while preserving deterministic token decoding.

2025-09-05
- Load plugins in deterministic order and document that plugin IDs remain stable when the set of plugin files is unchanged.
- Use a bounded budget when `config.yaml` is absent or invalid and expose `BUDGET_LIMIT` at the package root.

2025-09-19
- Added optional CPU pre-forward pass for `Wanderer` via `pre_forward=True`,
  recording CPU compute and GPU transfer times to help tune VRAM usage.
2025-09-01
- Compress repeating byte sequences in `UniversalTensorCodec` via on-the-fly
  dictionary to reduce token counts and VRAM usage.
- Track per-neuron loss differences with rolling history and mean value.
- Add support for `train_type` kwarg to `marble.training.run_training_with_datapairs` to match `marble.marblemain` API.
- Wire Brain-train plugin lifecycle (`on_init`/`on_end`) and merge returned summaries.
- Apply learning paradigms to the Wanderer in the lock-based datapair helper for consistent behavior.

- Keep tqdm progress lines visible when training via `run_training_with_datapairs`:
  - Added `Wanderer.pbar_leave` public attribute (default False).
- The datapair and wanderer-training helpers set `w.pbar_leave = True` so the status line isnâ€™t suppressed.
 - Added `Wanderer.pbar_verbose` to emit explicit per-walk start/end messages; helpers now leave it disabled so progress remains on a single line.
 - Progress reporting uses `tqdm.auto` for robust notebook and terminal updates.
